{"version":3,"sources":["types/FilterType.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["FilterType","TodoList","React","memo","todos","onTodoSelected","selectedTodo","className","map","todo","id","title","completed","isTodoSelected","classNames","type","onClick","TodoFilter","onChangeFilterType","filterType","query","onChangeQuery","handleFilterTypeSelect","useCallback","event","target","value","ACTIVE","COMPLETED","ALL","handleInputChange","onChange","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","response","ok","headers","includes","json","reject","Error","status","statusText","TodoModal","useState","isModalLoading","setIsModalLoading","hasModalError","setHasModalError","user","setUser","useEffect","userId","catch","finally","renderingModal","href","email","name","App","setTodos","hasError","setHasError","isLoading","setIsLoading","setFilterType","setSelectedTodo","setQuery","handleTodoSelect","find","handleFilterChange","typeOfFilter","visibleTodos","filter","toLowerCase","trim","getVisibleTodos","renderingList","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.49e99fb1.chunk.js","sourcesContent":["export enum FilterType {\n  ALL = 'all',\n  COMPLETED = 'completed',\n  ACTIVE = 'active',\n}\n","import React from 'react';\nimport classNames from 'classnames';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport './TodoList.scss';\n\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[],\n  onTodoSelected: (id: number) => void,\n  selectedTodo: Todo | null,\n};\n\nexport const TodoList: React.FC<Props> = React.memo(({\n  todos,\n  onTodoSelected,\n  selectedTodo,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n\n        <th>Title</th>\n\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map(todo => {\n        const {\n          id,\n          title,\n          completed,\n        } = todo;\n\n        const isTodoSelected = selectedTodo?.id === id;\n\n        return (\n          <tr\n            key={todo.id}\n            data-cy=\"todo\"\n            className={classNames({\n              'has-background-info-light': isTodoSelected,\n            })}\n          >\n            <td className=\"is-vcentered\">{id}</td>\n\n            <td className=\"is-vcentered\">\n              {todo.completed\n                ? (\n                  <span className=\"icon icon-success\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                )\n                : (\n                  <span className=\"icon icon-danger\">\n                    <i className=\"fas fa-xmark\" />\n                  </span>\n                )}\n            </td>\n\n            <td className=\"is-vcentered is-expanded\">\n              <p className={classNames({\n                'has-text-danger': !completed,\n                'has-text-success': completed,\n              })}\n              >\n                {title}\n              </p>\n            </td>\n\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => onTodoSelected(id)}\n              >\n                <span className=\"icon\">\n                  <i className={classNames(\n                    'far',\n                    {\n                      'fa-eye': !isTodoSelected,\n                      'fa-eye-slash': isTodoSelected,\n                    },\n                  )}\n                  />\n                </span>\n              </button>\n            </td>\n          </tr>\n        );\n      })}\n    </tbody>\n  </table>\n));\n","import React, { useCallback } from 'react';\nimport { FilterType } from '../../types/FilterType';\n\ntype Props = {\n  filterType: FilterType;\n  onChangeFilterType: (filterType: FilterType) => void;\n  query: string;\n  onChangeQuery: (value: string) => void;\n};\n\nexport const TodoFilter: React.FC<Props> = React.memo(({\n  onChangeFilterType,\n  filterType,\n  query,\n  onChangeQuery,\n}) => {\n  const handleFilterTypeSelect = useCallback((\n    event: React.ChangeEvent<HTMLSelectElement>,\n  ): void => {\n    const { value } = event.target;\n\n    switch (value) {\n      case FilterType.ACTIVE:\n        onChangeFilterType(FilterType.ACTIVE);\n        break;\n\n      case FilterType.COMPLETED:\n        onChangeFilterType(FilterType.COMPLETED);\n        break;\n\n      case FilterType.ALL:\n      default:\n        onChangeFilterType(FilterType.ALL);\n    }\n  }, []);\n\n  const handleInputChange = useCallback((\n    event: React.ChangeEvent<HTMLInputElement>,\n  ): void => {\n    const { value } = event.target;\n\n    onChangeQuery(value);\n  }, []);\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={filterType}\n            onChange={handleFilterTypeSelect}\n          >\n            <option value={FilterType.ALL}>All</option>\n            <option value={FilterType.ACTIVE}>Active</option>\n            <option value={FilterType.COMPLETED}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleInputChange}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query\n          && (\n            <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                aria-label=\"clear-search-button\"\n                data-cy=\"clearSearchButton\"\n                type=\"button\"\n                className=\"delete\"\n                onClick={() => onChangeQuery('')}\n              />\n            </span>\n          )}\n      </p>\n    </form>\n  );\n});\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promime\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see now the laoder works\n  return wait(800)\n    .then(() => fetch(fullURL))\n    .then(response => {\n      if (!response.ok) {\n        return Promise.reject(\n          new Error(`${response.status} - ${response.statusText}`),\n        );\n      }\n\n      if (!response.headers.get('content-type')?.includes('application/json')) {\n        return Promise.reject(new Error('Content-type is not supported'));\n      }\n\n      return response.json();\n    });\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\n\nimport { Loader } from '../Loader';\n\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\n\nimport { getUser } from '../../api';\n\ntype Props = {\n  selectedTodo: Todo | null,\n  onTodoSelected: (id: number | null) => void,\n};\n\nexport const TodoModal: React.FC<Props> = React.memo(({\n  selectedTodo,\n  onTodoSelected,\n}) => {\n  const [isModalLoading, setIsModalLoading] = useState(true);\n  const [hasModalError, setHasModalError] = useState(false);\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    setHasModalError(false);\n    setIsModalLoading(true);\n\n    if (selectedTodo) {\n      getUser(selectedTodo?.userId)\n        .then(setUser)\n        .catch(() => setHasModalError(true))\n        .finally(() => setIsModalLoading(false));\n    }\n  }, [selectedTodo?.id]);\n\n  const renderingModal = hasModalError\n    ? (\n      <h3>Error occured when data loaded</h3>\n    )\n    : (\n      <div className=\"modal-card\">\n        <header className=\"modal-card-head\">\n          <div\n            className=\"modal-card-title has-text-weight-medium\"\n            data-cy=\"modal-header\"\n          >\n            {`Todo #${selectedTodo?.id}`}\n          </div>\n\n          <button\n            aria-label=\"modal-close-button\"\n            type=\"button\"\n            className=\"delete\"\n            data-cy=\"modal-close\"\n            onClick={() => onTodoSelected(null)}\n          />\n        </header>\n\n        <div className=\"modal-card-body\">\n          <p className=\"block\" data-cy=\"modal-title\">\n            {selectedTodo?.title}\n          </p>\n\n          <p className=\"block\" data-cy=\"modal-user\">\n            <strong className={classNames({\n              'has-text-success': selectedTodo?.completed,\n              'has-text-danger': !selectedTodo?.completed,\n            })}\n            >\n              {selectedTodo?.completed\n                ? 'Done'\n                : 'Planned'}\n            </strong>\n\n            {' by '}\n\n            <a\n              href={`mailto:${user\n                ? user.email\n                : 'site.support@gmail.com'}`}\n            >\n              {user\n                ? user.name\n                : 'User unknown. If you think its error, write to our support'}\n            </a>\n          </p>\n        </div>\n      </div>\n    );\n\n  return (\n    <div\n      className={classNames(\n        'modal',\n        {\n          'is-active': selectedTodo,\n        },\n      )}\n      data-cy=\"modal\"\n    >\n      <div className=\"modal-background\" />\n\n      {isModalLoading\n        ? (\n          <Loader />\n        )\n        : renderingModal}\n    </div>\n  );\n});\n","import React, { useCallback, useEffect, useState } from 'react';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { Todo } from './types/Todo';\nimport { FilterType } from './types/FilterType';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\n\nimport { getTodos } from './api';\n\nconst getVisibleTodos = (\n  todos: Todo[],\n  filterType: FilterType,\n  query: string,\n) => {\n  let visibleTodos = todos;\n\n  switch (filterType) {\n    case FilterType.ACTIVE:\n      visibleTodos = visibleTodos.filter(todo => !todo.completed);\n      break;\n\n    case FilterType.COMPLETED:\n      visibleTodos = visibleTodos.filter(todo => todo.completed);\n      break;\n\n    default:\n      break;\n  }\n\n  visibleTodos = visibleTodos.filter(\n    todo => todo.title.toLowerCase().includes(\n      query.toLowerCase().trim(),\n    ),\n  );\n\n  return visibleTodos;\n};\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [hasError, setHasError] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [filterType, setFilterType] = useState<FilterType>(FilterType.ALL);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [query, setQuery] = useState('');\n\n  const handleTodoSelect = useCallback((id: number | null) => {\n    setSelectedTodo(todos.find(todo => todo.id === id) || null);\n  }, [todos]);\n\n  const handleFilterChange = useCallback((typeOfFilter: FilterType) => {\n    setFilterType(typeOfFilter);\n  }, []);\n\n  useEffect(() => {\n    setHasError(false);\n\n    getTodos()\n      .then(setTodos)\n      .catch(() => setHasError(true))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  const visibleTodos = getVisibleTodos(todos, filterType, query);\n\n  const renderingList = hasError\n    ? (\n      <h3>Error occured when data loaded</h3>\n    )\n    : (\n      <TodoList\n        todos={visibleTodos}\n        onTodoSelected={handleTodoSelect}\n        selectedTodo={selectedTodo}\n      />\n    );\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                filterType={filterType}\n                onChangeFilterType={handleFilterChange}\n                query={query}\n                onChangeQuery={setQuery}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading\n                ? <Loader />\n                : renderingList}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo\n        && (\n          <TodoModal\n            selectedTodo={selectedTodo}\n            onTodoSelected={handleTodoSelect}\n          />\n        )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}